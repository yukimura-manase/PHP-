

< PHPを学ぼう >

このレッスンでは図のようなお問い合わせフォームを作ることを目指します。

PHPを学べば、ユーザーからデータを受け取りそれを表示するなど、実際のWebサービスで必要な機能を作ることが出来ます。

< PHPとは？ >

HTMLでは決められたテキストしか表示することができませんでした。

PHPを使うと、見る人や状況に応じて、表示するテキストを変えることができます。

< PHPの書き方 >

1. PHPはHTMLに埋め込んで使うことができます。

    <?php 〜 ?>の中にPHPの命令を書いていきます。

    <?php 〜 ?>の部分がHTMLに変換された上で表示されます。


2. PHPでは文末にセミコロン「;」を使って文を区切ります。 

    セミコロンを忘れるとエラーが起きるので注意しましょう。

3.「//」から行末まではコメントになります。動作には関係しない情報で、主にメモなどに用いられます。


< 標準出力 echo >

「echo」は文字列などを出力するための命令です。

文字列を出力する場合はシングルクォーテーション「'」かダブルクォーテーション「"」で囲みます。

< 計算してみよう >

プログラミングを使えばコンピュータに計算させることが出来ます。

計算はコンピュータの最も得意なことの一つです。

足し算は「+」、引き算は「-」、掛け算は「*」、割り算は「/」で表します。

PHPでは割り算の余りを計算することもでき、「%」で表します。


「index.phpファイル」

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Progate</title>
        <link rel="stylesheet" type="text/css" href="stylesheet.css">
    </head>
    <body>

        <?php
            // 'Hello, world!'をechoしてください
            echo 'Hello, world!';
        ?>
        
        <br>

        <?php
            // 7 * 2をechoしてください
            echo 7 * 2;
        ?>

        <br>

        <?php
            // 8 % 3をechoしてください
            echo 8 % 3;
        ?>

    </body>
</html>

----------------------------------------------------------------------------------------------------------------------------------------

< データの種類 >

PHPには、「文字列」や「数値」などのデータの種類があります。「'Hello'」,「'a'」などは文字列、「1」,「3.14」などは数値となります。

< 変数とは？ >
プログラミングの重要な概念の1つである「変数」を学びましょう。

変数とは、データの入れ物です。

頭に「$」記号をつけることによって変数を定義します。

「$変数名 = 値;」で様々な値を変数に入れることが出来ます。

「＝」はプログラミングの世界では、右辺を左辺に代入するという意味です。


< 変数の役割 >

変数を使うメリットは大きくわけて２つあります。 

①データに名前をつけることでそのデータが何を表しているかを明確にできる。

②複数回使うデータを１つの変数に入れておくことで、変更があった場合も１箇所の修正ですむ。


<!DOCTYPE html>
<html>
    <head>
    <meta charset="utf-8">
    <title>Progate</title>
    <link rel="stylesheet" type="text/css" href="stylesheet.css">
    </head>
    <body>

        <!-- この下に変数$fruitを書いていきましょう！ -->
        <?php
            $fruit = 'りんご';
            echo $fruit;
        ?>

        <br>

        <!-- この下に変数$sumを書いていきましょう！ -->
        <?php
            $sum = 8+9;
            echo $sum;
        ?>

    </body>
</html>


----------------------------------------------------------------------------------------------------------------------------------------

変数の値を更新する

変数に数字を足す（１）
それでは、「変数の値に10を足したい」という時はどのようにすればよいのでしょうか？変数に数字を足したいときは、変数に数字を足した後、変数に再び代入します。 引き算など、その他の計算も同様です。
「=」は代入の意味であり、左右の値が等しいことを表すわけではないことに注意してください。



<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Progate</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css">
</head>
<body>

  <?php

    $x = 5;
    $y = 2;
    $a = 8;
    $b = 4;
    
  ?>

  <!-- この下で$xの計算をしていきましょう -->
  <?php
    $x += 10;
    echo $x;
  ?>

  <br>

  <!-- この下で$yの計算をしていきましょう -->
  <?php
    $y *= 5;
    echo $y;
  ?>

  <br>

  <!-- この下で$aの計算をしていきましょう -->
  <?php
    $a++;
    echo $a;
  ?>

  <br>
  
  <!-- この下で$bの計算をしていきましょう -->
  <?php
    $b--;
    echo $b;
  ?>

</body>
</html>



----------------------------------------------------------------------------------------------------------------------------------------

< 文字列の連結 >

ドット「.」記号を用いると文字列を連結することが出来ます。

文字列同士の連結、変数と文字列の連結、変数同士の連結をすることができます。

<?php
    $name = 'にんじゃわんこ';

    // 'こんにちは！'という文字列と$nameを連結してechoしてください
    echo "こんにちは！".$name;
  ?>

「.=」を用いると変数と文字列の連結を省略して書くことが出来ます。

$robo = "ロボ";

$robo .= "玉";  // $robo = $robo."玉"; の省略

echo $robo;     // ロボ玉


< 変数展開 >

変数展開！
ダブルクォーテーションで文字列を囲んだ場合、中の変数を{}で囲むとその部分が変数に入っている値で置き換えられます(変数展開)。

シングルクォーテーションで文字列を囲んだ場合は変数展開されず、変数が{}で囲まれていてもそのまま文字列としてみなされます。


<?php
    $name = 'にんじゃわんこ';

    // 'こんにちは！'という文字列と$nameを連結してechoしてください
    echo "こんにちは！{$name}";    
?>


----------------------------------------------------------------------------------------------------------------------------------------

< if文 >

if文を使うと、条件に応じて処理を分岐することができます。
if文は図のように書きます。
条件が成り立つ場合、｛｝の中の処理が実行されます。
条件が成り立たない場合は処理が実行されません。


<?php

    $x = 99 * 99;
    $y = 77 * 77;

    // ここにif文を書いていきましょう
    if($x > 9800){
      echo "変数xは9800より大きいです。";
    };
    
    if($y > 6000){
      echo "変数yは6000より大きいです。";
    };
    
    
  ?>





----------------------------------------------------------------------------------------------------------------------------------------

< else & elseif >

ifと組み合わせてelseを使うと、「もしも〜だったら・・・、そうでなければ・・・」といった条件分岐が可能になります。
if文の条件が「false」であった場合、elseの中の処理が実行されます。


elseifを用いることで、「もしも〜だったら・・・、それとも〜であれば・・・、いずれでもなければ・・・」といった多岐分岐が可能になります。

elseifは必要な分岐の数だけ並べることができますが、複数の条件に合致した場合、実行されるのは最初に合致したブロックだけとなります。

<?php
    // $ageという変数に自分の年齢を代入してください
    $age = 26;
    if($age >= 30){
      echo "あなたは30歳以上です。";
    } else {
      echo "あなたは30歳未満です。";
    };
    
  ?>


----------------------------------------------------------------------------------------------------------------------------------------

&&, ||
複数の条件式を組み合わせる

「&&」と「||」は論理演算子と呼ばれ、複数の条件を１つにまとめる時に使います。

&&（かつ）は左右の式がともに「true」の場合、全体も「true」になります。

||（または）は左右の式のどちらか、または両方が「true」の場合、全体も「true」になります。


条件の否定
「!」も論理演算子の１つであり、条件の否定ができます。式が「真」であれば「偽」に、「偽」であれば「真」になります。

 <?php
  
    $x = 1071;
    
    // 以下にif-elseif-else文を書いてください
    if( $x%3 == 0 && $x%7 == 0 ){
      echo "xは3の倍数かつ7の倍数です。";
    } else if($x%3 == 0){
      echo "xは3の倍数ですが7の倍数ではありません。";
    } else if($x%7 == 0){
      echo "xは7の倍数ですが3の倍数ではありません。";
    } else {
      echo "xは7の倍数でも3の倍数でもありません。";
    };
    
  ?>


----------------------------------------------------------------------------------------------------------------------------------------

< switch文 >

if, elseifによる分岐が多く複雑な場合、switch文で書き換えるとシンプルで読みやすいコードにできます。

switch(値)の(値)が、「caseの値」と一致したとき、そのブロックが実行されます。

caseのどれにも一致しなかった時、defaultのブロックが実行されます。

caseブロックの最後にはbreak命令を指定します。

break命令は現在のブロックから脱出するための命令です。

break命令がないと、後ろに続くcaseブロックが続けて実行されてしまいます。


<?php

    // 変数$numを定義し、好きな数字を代入してください
    $num = 12;
  
    // 変数$remainderを定義し、変数$numを3で割った時の余りを代入してください
    $remainder = $num % 3;
 
    // switch文を用いてください
    switch($remainder){
      case 0 :
        echo "大吉です。";
        break;
      case 1 :
        echo "中吉です。";
        break;
      case 2 :
        echo "小吉です。";
        break;
      default :
        echo "凶です。";
    };
  
  ?>


----------------------------------------------------------------------------------------------------------------------------------------

< 配列とは？ >

これまでの変数が一つしか値を扱えなかったのに対し、配列を用いると複数の値をまとめて保存することができます。

配列は仕切りのある箱のようなもので、それぞれのスペースにデータが入っており、0, 1, 2...というインデックス番号によってスペースの名前が付けられています。


配列を使ってみよう

配列の基本構文は「$配列名 = array(値１, 値2, ・・・);」のようになっています。配列のデータには先頭から0, 1, 2, ・・・と順に「インデックス番号」が割り振られていきます。

配列のデータを取り出すには「インデックス番号」を用いて $配列名[インデックス番号] という風にします。


値の追加、上書き
配列の末尾に値を追加するときは「$配列名[] = 値;」とします。また、すでに存在するインデックス番号を指定すると、配列の値を上書きすることもできます。


 <?php

    // この下に配列を作ってください
    $colors = array('赤', '青', '黄');
    echo $colors[0];
    
    $colors[] = '白'; // 末尾に追加
    echo $colors[3]
?>


----------------------------------------------------------------------------------------------------------------------------------------

< 連想配列を使ってみよう >

連想配列は、配列と同じく複数のデータをまとめて管理するのに用いられます。

配列との違いは、個々の要素を管理するのにインデックス番号ではなく、「キー」と呼ばれる文字列などの値を指定することができる点です。

連想配列では「 $配列名 = array('キー名' => '値１', ・・・); 」といったように、「=>」を用いてキーと値をセットします。


< 連想配列の使い方 >

連想配列の値を取り出すには、対応する「キー」を用いて 「配列名[キー] 」のようにします。

また図のように、「 配列名[キー] = 値; 」のようにすることで、連想配列にデータを追加することができます。


<?php

    // この下に連想配列を作ってください
    $scores = array(
      '数学' => 70,
      '英語' => 90,
      '国語' => 80
    );
    
    $scores['国語'] += 5;
    echo $scores['国語'];
?>


----------------------------------------------------------------------------------------------------------------------------------------

< for文 繰り返し処理 >

1から100までの数値を出力するときのように、繰り返しで何かを行いたいときには繰り返し文を用います。

繰り返し文を使うことで、繰り返しの処理（ループ処理）を以下の図のようにたった数行で書くことが出来ます。


for(初期値, 繰り返し範囲, 値の更新){
  繰り返す処理
};


<?php

    // この下にfor文を書いてください
    for( $i=51; $i <= 100; $i++ ){
      echo $i;
      echo '<br>';
    };
    
?>





----------------------------------------------------------------------------------------------------------------------------------------

< while文 >

while文もfor文と同様に、繰り返し処理の一つです。

条件式を指定し、それがtrueの間、処理が繰り返し実行されます。

for文の時のように変数$iが自動的に増えていかないため、ここではループのたびに「$i ++;」を行っています。


< 無限ループ >

無限ループとは条件式が何周してもtrueのままで、永遠に終了しないループのことです。

無限ループはコンピューターに極端な負担を与えてしまうため、ループ処理を記述する際は条件式がどこかでfalseになるように気をつけなければいけません。

<?php
    $i = 2;

    while($i <= 100){
      if($i%2==0){
        echo $i;
        echo '<br>';
      };
      $i++;
    };
  ?>

----------------------------------------------------------------------------------------------------------------------------------------

break
break文は現在のループを強制的に中断する命令です。for, while, foreachなどの繰り返し文の中で利用できます。break文はif文などの条件文と組み合わせて利用するのが一般的です。


for文を用いて1から1000までの数字をechoしてください。
ただし、501以上の数字を表示しないようにbreak文を用いてfor文を抜けてください。

<?php

    // この下にfor文を書いてください
    for($i=1; $i <= 1000; $i++){
      if($i >= 501){
        break;
      };
      echo $i;
      echo "<br>";
    };
    
  ?>


----------------------------------------------------------------------------------------------------------------------------------------

< continue >

ループそのものを完全に抜けてしまうbreak文に対して、continue文は現在の周だけをスキップし、ループそのものは継続して実行します。

continue文もfor, while, foreachなどの繰り返し文の中で利用できます。

for文を用いて1から1000までの数字をechoしてください。
ただし、3の倍数の場合はechoせずにcontinueを用いて次の数字に飛んでください。


<?php

    // この下にfor文を書いてください
    for($i=1; $i <= 1000; $i++){
      if($i%3==0){
        continue;
      };
      echo $i;
      echo "<br>";
    };
    
  ?>

----------------------------------------------------------------------------------------------------------------------------------------

< foreach >

foreach文とは、配列または連想配列に対して、先頭のデータから順に繰り返し処理を行うための命令です。

以下のように配列のデータを１つずつ取り出して処理を行うことが出来ます。

「as」の後ろの変数に、ループの度にデータが先頭から順に代入されていきます。

asの後ろの変数名は何を指定しても大丈夫です。


foreachの書き方（１）

foreach文では、配列内のデータが順次「キー変数」、「値変数」に代入され、それに対して処理が繰り返し適用されます。

「キー変数」には、配列のときはインデックス番号が、連想配列のときはキーが代入されます。

ただし、「キー変数」の部分は省略可能です。

書き方①
foreach(配列 as キー変数 => 値変数){

};

書き方②
foreach( 配列 as 値変数){

};


foreachの書き方（２）

foreach文は理解しにくいので少し例を見てみましょう。 図の配列は、果物の名前を「キー」として、その色を「値」として保持している連想配列です。

1周目のループでは$keyに'Apple'、$valueに'Red'が、２周目のループでは$keyに'Banana'、$valueに'Yellow'が入っています。




<?php

    $scores = array('数学' => 70, '英語' => 90, '国語' => 80);

    foreach($scores as $key => $value){

      echo "{$key}は{$value}点です。";
    };
    
?>


----------------------------------------------------------------------------------------------------------------------------------------

< 関数を使ってみよう >

関数とは、あるまとまった処理を行い、値を返すものです。

PHPには、いくつか役立つ組み込み関数が設定されている！

「strlen」は組み込み関数の1つで、文字列の文字数を返します。
ここで、()の中に与える値を「引数」といいます。


「count」は配列の要素の数を返す関数です。

「rand」は１つ目の引数と、２つ目の引数の間のランダムな整数を返します。


<?php

    $str = 'progate';

    // strlenを用いて$strの長さをechoしてください
    echo strlen($str);
    
    echo '<br>';
    
    $array = array('HTML', 'CSS', 'PHP');

    // countを用いて$arrayの要素数をechoしてください
    echo count($array);
    
    echo '<br>';
    
    // randを用いて10から15までのランダムな数字をechoしてください
    echo rand();
?>


----------------------------------------------------------------------------------------------------------------------------------------

< 関数の作り方 >

関数を作るには「function 関数名(){ 処理 }」という書き方をします。

関数名は自由につけることが出来ます。
関数は「関数名()」というように()をつけて呼び出すことができます。


< 引数 >

関数を呼び出す際、関数に値を渡すと、関数内でその値を利用することができます。

この値を「引数」と呼びます。

引数を関数内で使うには、それを受け取るための「仮引数」を、関数の定義時に指定しておく必要があります。

仮引数が複数ある場合はカンマ（,）を用いて指定します。



<?php

    // 関数helloを定義してください
    function hello(){
      echo "Hello, world!";
    };
    
    // 関数helloを呼び出してください
    hello();
    
    echo '<br>';
    // 関数printRectangleAreaを定義してください
    function printRectangleArea($height, $width){
      echo $height * $width;
    };
    
    // 引数を(5, 10)としてprintRectangleAreaを呼び出してください
    printRectangleArea(5, 10);
    
?>


----------------------------------------------------------------------------------------------------------------------------------------

< 戻り値 >

関数は値を「返す」ことができて、この値のことを戻り値と呼びます。

関数を実行した結果、その関数実行部分が戻り値に置き換わるというイメージです。

戻り値は「return」で指定します。



<?php

    // 関数getCircleAreaを定義してください
    function getCircleArea($radius){
      return $radius * $radius * 3;
    };
    
    // 関数getCircleAreaを呼び出して、戻り値を変数$circleAreaに代入してください
    $circleArea = getCircleArea(5);
    
    // $circleAreaをechoしてください
    echo $circleArea;
    
?>

----------------------------------------------------------------------------------------------------------------------------------------

formタグ
フォームをつくろう
いよいよお問い合わせフォームをつくっていきます。
フォームの見た目はHTMLでフォームを作成し、入力値を取得するためにPHPを使用していきます。


<form action='sent.php' method='post' ></form>

action属性 => url(送信先)

method属性 => 送信方法・HTTPプロトコルの方法


----------------------------------------------------------------------------------------------------------------------------------------

< $_POST >

フォームのデータを受け取ろう

フォームで送信した値を受け取るには「$_POST」を使用します。

「$_POST」は連想配列になっています。

[ ]の中に、<input>と<textarea>のname属性に指定した値を入れることで、それぞれの送信した値を受け取ることが出来ます。


【 index.php 】

<form method="post" action="sent.php">
        <div class="form-item">名前</div>
        <input type="text" name="name">

        <div class="form-item">内容</div>
        <textarea name="body"></textarea>

        <!-- この下に送信ボタンを作りましょう -->
        <input type="submit" value="送信" />
        
</form>


【 sent.php 】

<div class="form-item">■ 名前</div>

      <!-- nameを受け取りechoしましょう -->
      <?php
        echo $_POST['name'];
      ?>
      <div class="form-item">■ 内容</div>

      <!-- bodyを受け取りechoしましょう -->
      <?php
        echo $_POST['body'];
      ?>
</div>

----------------------------------------------------------------------------------------------------------------------------------------

< セレクトボックスの作り方 >

セレクトボックスをつくるには図のように<select>タグの中に<option>タグを並べます。
<option>タグの中身が選択肢として表示されます。

選んだ選択肢の値を渡そう

<select>タグには「$_POST」で値を受け取るためのname属性を指定します。

<option>タグのvalue属性が送信される値です。

【 index.php 】

  <select name="age">
    <option value="未選択" >選択してください</option>
    <option value="20代" >20代</option>
    <option value="30代" >30代</option>
  </select>

【 sent.php 】

  <div class="form-item">■ 年齢</div>
  <?php echo $_POST['age']; ?>


----------------------------------------------------------------------------------------------------------------------------------------

フォームを完成させよう
いよいよ最後の演習になりました！繰り返し処理と変数展開を用いて多数のoptionタグを作りましょう。
ただし、変数展開を用いる際はダブルクォーテーションで囲むようにしましょう。


<select name="age">
  <option value="未選択">選択してください</option>
  <!-- for文を用いて6歳から100歳までをoptionで選べるようにしましょう -->
  <?php 
    for($i = 6; $i <= 100; $i++){
      echo "<option value='{$i}'>{$i}</option>";
    };
  ?>
</select>


<div class="form-item">お問い合わせの種類</div>
<?php 
  $types = array('Progateに関するお問い合わせ', 'Progateに対する意見', '採用に関するお問い合わせ', '取材・メディア関連のお問い合わせ', '料金に関するお問い合わせ', 'その他');
  ?>
<!-- この下にselectタグを書いていきましょう -->
<select name='category' >
  <option value="未選択">選択してください</option>
  <?php
    foreach($types as $key => $type){
      echo "<option value='{$type}'>{$type}</option>";
    };
  ?>
</select>


----------------------------------------------------------------------------------------------------------------------------------------

< クラスとインスタンス >

クラスの書き方
それでは実際にクラス（設計図）の書き方を見てみましょう。

クラスは図のように、「class クラス名」と定義し、「{}」の間に、そのクラスの内容を書いていきます。
クラス名は大文字で始めます。

クラス（設計図）を元に生成された実体を「インスタンス」と呼びます。インスタンスとオブジェクトは同じ意味で使われます。

インスタンスは「new」を用いて「new クラス名()」で生成できます。

「$変数名 = new クラス名()」のようにすることで生成したインスタンスを変数に代入しています。

なお、インスタンスの生成はクラスの外で行います。

<?php
// Menuクラスを定義しましょう
class Menu {
  
}

// Menuクラスのインスタンスを作り、変数$curryに代入してください
$curry = new Menu();

// Menuクラスのインスタンスを作り、変数$pastaに代入してください
$pasta = new Menu();

?>


----------------------------------------------------------------------------------------------------------------------------------------

< プロパティとメソッド >

それではクラス（設計図）の中身を書いていきましょう。

クラス（設計図）にはそのインスタンス（実体）が持つ「プロパティ」と「メソッド」の２つを定義します。

プロパティとはインスタンスが持つデータのことで、メソッドはインスタンスに関連する処理（関数）のことです。


< プロパティの書き方 >

プロパティは図のように「public $プロパティ名」のように定義します（publicについては後ほど説明するので気にしないでください）。

詳しい使い方は次のスライドで見ていきましょう。


< プロパティへのアクセス >

「インスタンス->プロパティ名」とすることで、そのインスタンスのプロパティにアクセスすることができます（プロパティ名に$は不要）。
このように、プロパティにアクセスする際には「->」（ハイフン「-」と大なり「>」）を用います。


<?php
class Menu {
  // $nameというプロパティを定義してください
  public $name;
  
}

$curry = new Menu();
$pasta = new Menu();
// $curryのnameプロパティに'CURRY'を代入してください
$curry->name = 'CURRY';

// $pastaのnameプロパティに'PASTA'を代入してください
$pasta->name = 'PASTA';

// $curryのnameプロパティをechoしてください
echo $curry->name;

echo '<br>';
// $pastaのnameプロパティをechoしてください
echo $pasta->name;

?>

----------------------------------------------------------------------------------------------------------------------------------------

< メソッドとは >

今度はクラス（設計図）にメソッドを定義していきましょう。

メソッドとはそれぞれのインスタンスが持つ関数のことです。

< メソッドの使い方 >

メソッドは「public function メソッド名()」のように定義します。

また、「 インスタンス->メソッド名() 」のようにメソッドにアクセスする（メソッドを呼び出す）ことができます。

<?php
class Menu {
  public $name;
  
  // helloメソッドを定義してください
  public function hello(){
    echo '私はMenuクラスのインスタンスです';
  }
  
}

$curry = new Menu();
$pasta = new Menu();
$curry->name = 'CURRY';
$pasta->name = 'PASTA';

// $curryに対してhelloメソッドを呼び出してください
$curry->hello();

echo '<br>';
// $pastaに対してhelloメソッドを呼び出してください
$pasta->hello();

?>

----------------------------------------------------------------------------------------------------------------------------------------

< $this >

メソッド内でインスタンスのプロパティやメソッドにアクセスしたい時には「$this」という特殊な変数を用います。

$thisはクラス内のメソッドの定義の中でのみ使用できます。
$thisはメソッドが呼ばれた時に、そのメソッドを呼び出しているインスタンスに置き換えられます。

<?php
class Menu {
  public $name;
  
  public function hello() {

    // '私は○○です'とechoしてください
    echo "私は{ $this->name }です";
    
  }
}

$curry = new Menu();
$pasta = new Menu();
$curry->name = 'CURRY';
$pasta->name = 'PASTA';
$curry->hello();
echo '<br>';
$pasta->hello();

?>


----------------------------------------------------------------------------------------------------------------------------------------

< コンストラクタ >

「__construct」という特別なメソッドを定義すると、newを用いてインスタンスを生成するときに、このメソッドが自動的に呼ばれます。

このようなインスタンスの生成時に呼ばれるメソッドのことを一般的に「コンストラクタ」といいます。


<?php
class Menu {
  public $name;
  
  // コンストラクタを定義してください
  public function __construct(){
    echo '１つのメニューが作られました';
  }
  
  public function hello() {
    echo '私は'.$this->name.'です';
  }
}

$curry = new Menu();
echo '<br>';
$pasta = new Menu();
echo '<br>';
$curry->name = 'CURRY';
$pasta->name = 'PASTA';
$curry->hello();
echo '<br>';
$pasta->hello();

?>


----------------------------------------------------------------------------------------------------------------------------------------

< コンストラクタと引数 >

__constructメソッドは引数をとることができます。

newを用いてインスタンスを生成する際には引数を与えることができ、その引数の値が__constructメソッドに渡されます。

< コンストラクタとプロパティ >

図のように、__constructメソッド内で、$thisを用いてインスタンスのプロパティに値をセットすることができます。

インスタンスの生成時にプロパティをセットすることができる

<?php
class Menu {
  public $name; // valueが設定されていない
  
  // コンストラクタの引数に$nameを入れてください
  public function __construct($name) {  // 引数
    // nameプロパティに引数の$nameを代入してください
    $this->name = $name;
    
  }
  
  public function hello() {
    echo '私は'.$this->name.'です';
  }
}

// new Menu()の引数に'CURRY'を入れてください
$curry = new Menu('CURRY');
// new Menu()の引数に'PASTA'を入れてください
$pasta = new Menu('PASTA');

$curry->hello();
echo '<br>';
$pasta->hello();

?>

----------------------------------------------------------------------------------------------------------------------------------------

HTMLとPHP
HTMLにPHPを埋め込もう
本格的にレイアウトを組んでいくために、HTMLにPHPのコードを埋め込んでいきましょう。
図のようにPHPのコードを埋め込むことで、HTMLのコードとPHPのコードを切り分けることができ、見やすくなります。


セミコロンを省略
できる条件
PHPのコードは、文末にセミコロン「;」を使って区切る必要があると学習してきました。
しかしPHPのコードを１行で書き表す場合は、区切る必要がないのでセミコロンを省略することができます。

<?php
class Menu {
  public $name;
  
  public function __construct($name) {
    $this->name = $name;
  }
  
  public function hello() {
    echo '私は'.$this->name.'です';
  }
}

$curry = new Menu('CURRY');
$pasta = new Menu('PASTA');

?>

<!-- <p>タグの中で、$curryのnameプロパティを表示してください -->
<p>
  <?php echo $curry->name; ?>
</p>

<!-- <p>タグの中で、$pastaのnameプロパティを表示してください -->
<p><?php echo $pasta->name ?></p>


----------------------------------------------------------------------------------------------------------------------------------------

foreach文をHTMLに埋め込もう

foreach文をHTMLに埋め込む際、右図のように書くことができます。
foreach文の「{」の代わりに「:」、「}」の代わりに「endforeach」と記述し、その間に処理を書いていきます。

この処理部分にはHTMLのタグを埋め込むことができます！

endif, endfor
if文、for文、while文やswitch文などもforeach文と同様に、それぞれ「endif」、「endfor」、「endwhile」、「endswitch」を使って書くことができます。


<?php
class Menu {
  public $name;
  
  public function __construct($name) {
    $this->name = $name;
  }
  
  public function hello() {
    echo '私は'.$this->name.'です';
  }
}

$juice = new Menu('JUICE');
$coffee = new Menu('COFFEE');
$curry = new Menu('CURRY');
$pasta = new Menu('PASTA');

// 配列の中に上記の4つのインスタンスを順に入れて、変数$menusに代入してください
$menus = [$juice, $coffee, $curry, $pasta];

?>

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Café Progate</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css">
  <link href='https://fonts.googleapis.com/css?family=Pacifico|Lato' rel='stylesheet' type='text/css'>
</head>
<body>
  <div class="menu-wrapper container">
    <h1 class="logo">Café Progate</h1>
    <div class="menu-items">

      <!-- 配列$menusの要素を変数$menuとするforeach文を書いてください -->

      <?php foreach($menus as $menu): ?>
        <h3><?php echo $menu->name; ?></h3>
      <?php endforeach ?>


    </div>
  </div>
</body>
</html>


----------------------------------------------------------------------------------------------------------------------------------------

< ファイルを分けよう: require_once >

コードが長くなってきたので表示用のファイル（index.php）とクラス定義用のファイル（menu.php）とデータの定義用のファイル（data.php）に分けましょう。

「 require_once 」を用いると別のphpファイルを読み込むことができます。

require_onceで読み込んだファイルで定義されているクラスや変数を、require_onceを記述したファイル内で使うことができます。

< 基本構文 >
require_once('読み込むphpファイル名');


【 menu.php 】

<?php
// クラスの定義部分をここに移してください
class Menu {
  public $name;
  
  public function __construct($name) {
    $this->name = $name;
  }
  
  public function hello() {
    echo '私は'.$this->name.'です';
  }
}
// ここまでクラスの定義部分

?>

【 data.php 】

<?php
// menu.phpを読み込んでください
require_once('menu.php');

// データ定義部分をここに移してください
$juice = new Menu('JUICE');
$coffee = new Menu('COFFEE');
$curry = new Menu('CURRY');
$pasta = new Menu('PASTA');

$menus = array($juice, $coffee, $curry, $pasta);
// ここまでデータ定義部分

?>


【 index.php 】

<!-- ここでdata.phpを読み込んでください  -->
<?php require_once('data.php'); ?>

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Café Progate</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css">
  <link href='https://fonts.googleapis.com/css?family=Pacifico|Lato' rel='stylesheet' type='text/css'>
</head>
<body>
  <div class="menu-wrapper container">
    <h1 class="logo">Café Progate</h1>
    <div class="menu-items">
      <?php foreach ($menus as $menu): ?>
        <h3 class="menu-item-name"><?php echo $menu->name ?></h3>
      <?php endforeach ?>
      
    </div>
  </div>
</body>
</html>



----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------

< クラスプロパティ >

ここではまずメニューの数を表示していきます。メニューの数は生成されたインスタンスの数と一致します。

インスタンスの数は個々のインスタンスではなく、クラス全体で管理する必要があります。

「クラスプロパティ」というものを用いるとこれを実現できます。

< クラスプロパティの定義とアクセス >

「個々のインスタンスがもつデータ（プロパティ）」ではなく、「クラスがもつデータをクラスプロパティ」といいます。

クラスプロパティは「static」(静的な・固定的な)を用いて定義します。

「クラスプロパティにアクセス」する場合は、「 クラス名::$クラスプロパティ名 」のように「::」（コロン「:」２つ）を用います（$の位置に気をつけてください）。

  「::」（コロン「:」２つ） => クラスプロパティやクラスメソッドにアクセスするための演算子

<h3>メニュー<?php echo Menu::$count; ?>品</h3>


<?php
class Menu {
  private $name;
  private $price;
  private $image;
  private $orderCount = 0;
  // $countというpublicなクラスプロパティを、初期値を数値の4として定義してください
  public static $count = 4;
  
  public function __construct($name, $price, $image) {
    $this->name = $name;
    $this->price = $price;
    $this->image = $image;
  }

}
?>


----------------------------------------------------------------------------------------------------------------------------------------

< クラスメソッド: コンストラクタを活用しよう >

先程はクラスプロパティ$countの初期値を4としました。

今回は生成されたインスタンス数（メニュー数）が変化した時に自動的に$countの値が変わるようにしましょう。

$countの初期値を0として、コンストラクタ内でクラスプロパティ$countの値に1を足すことで、生成されたインスタンスの数（メニュー数）を数えることができます。


< self: クラス内でクラスプロパティにアクセスする >

クラス内でクラスプロパティにアクセスする際は「self」という特殊な変数を用います。

selfは、クラスの中で使うとそのクラス自身のことを指し示し、「 self::$クラスプロパティ名 」のように使います（$の位置に気をつけてください）。

  「::」（コロン「:」２つ） => クラスプロパティやクラスメソッドにアクセスするための演算子

このselfを用いてコンストラクタの中でクラスプロパティ$countの値を変更しましょう。


< クラスメソッド >

$countのアクセス権をprivateにしましょう。
するとクラスの外から$countにアクセスできなくなるので$countのゲッターを定義します。

$countのゲッターのように、個々のインスタンスのデータに関係ない処理を行いたい時には「クラスメソッド」を用います。

クラスメソッドは「static」を用いて定義し、「 クラス名::クラスメソッド名 」のように呼び出します。

  「::」（コロン「:」２つ） => クラスプロパティやクラスメソッドにアクセスするための演算子


【 menu.php 】

<?php
class Menu {
  private $name;
  private $price;
  private $image;
  private $orderCount = 0;

  // クラスプロパティ$countのアクセス権をprivateに、初期値を数値の0にしてください
  private static $count = 0;
  
  public function __construct($name, $price, $image) {
    $this->name = $name;
    $this->price = $price;
    $this->image = $image;
    
    // インスタンス生成の度にクラスプロパティを++;
    self::$count++;
    
  }
  
  public function hello() {
    echo '私は'.$this->name.'です';
  }
  
  public function getName() {
    return $this->name;
  }
  
  public function getImage() {
    return $this->image;
  }
  
  public function getOrderCount() {
    return $this->orderCount;
  }
  
  public function setOrderCount($orderCount) {
    $this->orderCount = $orderCount;
  }
  
  public function getTaxIncludedPrice() {
    return floor($this->price * 1.08);
  }
  
  public function getTotalPrice() {
    return $this->getTaxIncludedPrice() * $this->orderCount;
  }
  
  // getCountというクラスメソッドを追加してください
  public static function getCount(){
    return self::$count; // クラスプロパティを呼び出しリターンするgetter
  }
  
}
?>


【 index.php 】

<?php 
require_once('data.php');
require_once('menu.php');
?>

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Café Progate</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css">
  <link href='https://fonts.googleapis.com/css?family=Pacifico|Lato' rel='stylesheet' type='text/css'>
</head>
<body>
  <div class="menu-wrapper container">
    <h1 class="logo">Café Progate</h1>
    
    <!-- Menuクラスに対してgetCountメソッドを呼び出して、クラスプロパティ$countを表示してください -->
    <h3>メニュー<?php echo Menu::getCount(); ?>品</h3>
    
    <form method="post" action="confirm.php">
      <div class="menu-items">
        <?php foreach ($menus as $menu): ?>
          <div class="menu-item">
            <img src="<?php echo $menu->getImage() ?>" class="menu-item-image">
            <h3 class="menu-item-name"><?php echo $menu->getName() ?></h3>
            <p class="price">¥<?php echo $menu->getTaxIncludedPrice() ?>（税込）</p>
            <input type="text" value="0" name="<?php echo $menu->getName() ?>">
            <span>個</span>
          </div>
        <?php endforeach ?>
      </div>
      <input type="submit" value="注文する">
    </form>
  </div>
</body>
</html>


----------------------------------------------------------------------------------------------------------------------------------------

< 継承とは >

すでに定義されているクラスのプロパティやメソッドを別のクラスに引き継ぐことを「継承」といいます。このとき引き継がれる元のクラスを「親クラス」、継承してできる新しいクラスを「子クラス」と呼びます。
子クラスは、親クラスのプロパティやメソッドを全て引き継いだ上で、独自の機能を追加することができます。

< 継承の書き方 >

継承を用いて新しく子クラスを定義するときは、「extends」を用いて図のように「 class 子クラス名 extends 親クラス名 」のように書きます。

< 継承の使い方 >

子クラスは親クラスのプロパティやメソッドを引き継いでいるので、図のように親クラスで定義されているメソッドを呼び出すことができます。

----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------









